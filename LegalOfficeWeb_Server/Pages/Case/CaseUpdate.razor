@page "/EditCases/{CurretnID}"
@using System;
@using LegalOfficeWeb_Business.Service.IService
@using LegalOfficeWeb_Common
@using LegalOfficeWeb_Models
@using LegalOfficeWeb_Models.CaseDTO
@inject ILocalStorageService _localStorage
@inject ICaseService objCasesService
@inject NavigationManager NavigationManager

<EditForm Model="@cases" OnValidSubmit="UpdateCase">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">ID</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="cases.CaseNr" />
        </div>
        <ValidationMessage For="@(() => cases.CaseNr)" />
    </div>
    <div class="mb-3">
        <label asp-for="AgencyID" class="control-label">Agency Id</label>
        <select @bind="@cases.AgencyId" class="form-control">
            <option value="">Agency Id</option>
            <option value="DFE">DFE</option>
            <option value="DGJ">DGJ</option>
            <option value="DGL">DGL</option>
            <option value="DMI">DMI</option>
            <option value="DPE">DPE</option>
            <option value="DPR">DPR</option>
            <option value="DPZ">DPZ</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">EldebitorID</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="cases.EldebitorId" />
        </div>
        <ValidationMessage For="@(() => cases.EldebitorId)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">AMeterID</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="cases.AMeterId" />
        </div>
        <ValidationMessage For="@(() => cases.AMeterId)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Subdistrict</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="cases.Subdistrict" />
        </div>
        <ValidationMessage For="@(() => cases.Subdistrict)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Customer Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="cases.CustomerName" />
        </div>
        <ValidationMessage For="@(() => cases.CustomerName)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">ID Number</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="cases.IdentityNr" />
        </div>
        <ValidationMessage For="@(() => cases.IdentityNr)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Phone Number</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="cases.PhoneNr" />
        </div>
        <ValidationMessage For="@(() => cases.PhoneNr)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Address</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="cases.Address" />
        </div>
        <ValidationMessage For="@(() => cases.Address)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">TariffId</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="cases.TariffId" />
        </div>
        <ValidationMessage For="@(() => cases.TariffId)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Municipality</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="cases.Municipality" />
        </div>
        <ValidationMessage For="@(() => cases.Municipality)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Birthdate</label>
        <div class="col-md-4">
            <input class="form-control" type="date" @oninput="UpdateBdate" />
        </div>
    </div>
    <div class="mb-3">
        <label asp-for="Department" class="control-label">Department Id</label>
        <select @bind="@DepartmentIDDrop" class="form-control">
            <option value="">Department Id</option>
            <option value="1">Legal Office</option>
            <option value="2">Customer Care</option>
        </select>
    </div>
    <div class="mb-3">
        <label asp-for="Status" class="control-label">Status Id</label>
        <select @bind="@StatusIDDrop" class="form-control">
            <option value="">Status Id</option>
            <option value="1">Initiated</option>
            <option value="2">Notification</option>
            <option value="3">Agreement</option>
            <option value="4">Criminal Charge</option>
            <option value="5">Finished</option>
            <option value="6">Canceled</option>
        </select>
    </div>

    <div class="mb-3">
        <label for="Address" class="form-label">MainResponsibleUserID</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="cases.MainResponsibleUserId" />
        </div>
        <ValidationMessage For="@(() => cases.MainResponsibleUserId)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">SecondResponsibleUserID</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="cases.SecondResponsibleUserId" />
        </div>
        <ValidationMessage For="@(() => cases.SecondResponsibleUserId)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Comment</label>
        <div class="col-md-4">
            <InputTextArea class="form-control" @bind-Value="cases.CreatedComment" />
        </div>
        <ValidationMessage For="@(() => cases.CreatedComment)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Update</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    private string selectedReason = "";
    private string selectedLocation = "";
    [Parameter]
    public string CurretnID { get; set; }
    CasesResponseDTO caseSelected = new CasesResponseDTO();
    CaseInputResponseDTO caseinput = new CaseInputResponseDTO();
    CUDCaseDTO cases = new CUDCaseDTO();
    string userId;
    public string bDate { get; set; }
    public string DepartmentIDDrop { get; set; }
    public string StatusIDDrop { get; set; }
    private void UpdateBdate(ChangeEventArgs e)
    {
        bDate = e.Value.ToString() + " 00:00:00";
    }
    protected override async Task OnInitializedAsync()
    {
        var userInfo = await _localStorage.GetItemAsync<CurrentUserDTO>(SD.Local_UserDetails);
        int userId = int.Parse(userInfo.Id);
        var c = int.Parse(CurretnID);
        CaseDataDTO caseData = new CaseDataDTO(userId, c, "DPR");
        caseSelected = await Task.Run(() => GetCaseId(caseData));
        caseinput = await Task.Run(() =>  objCasesService.GetRLCaseInputs(caseData));
        cases = new CUDCaseDTO()
            {
                CaseId = int.Parse(CurretnID),
                CaseNr = caseSelected.CaseNr,
                AgencyId = caseSelected.AgencyId,
                EldebitorId = int.Parse(caseSelected.EldebitorId),
                AMeterId = caseinput.AMeterID,
                Subdistrict = caseinput.Subdistrict,
                CustomerName = caseSelected.CustomerName,
                IdentityNr = caseinput.IdentityNr,
                PhoneNr = caseinput.PhoneNr,
                Address = caseinput.Address,
                TariffId = caseinput.TariffId,
                Municipality = caseinput.Municipality,
                BirthDate = caseinput.BirthDate.ToString(),
                DepartmentId = caseSelected.DepartmentId,
                StatusId = caseSelected.StatusId,
                StatusDate = DateTime.Now.ToString(),
                MainResponsibleUserId = caseSelected.MainResponsibleUserId,
                SecondResponsibleUserId = caseSelected.SecondResponsibleUserId,
                SourceApp = caseSelected.SourceApp,
                SourceId = caseSelected.SourceId,
                SourceDate = caseSelected.SourceDate.ToString(),
                CreatedComment = caseSelected.CreatedComment
            };
        

    }
    public async Task<CasesResponseDTO> GetCaseId(CaseDataDTO casesData)
    {

        CasesResponseDTO cases = await objCasesService.GetRLCase(casesData);

        return cases;
    }
    public async Task<CaseInputResponseDTO> GetRLCaseInputs(CaseDataDTO casesData)
    {

        CaseInputResponseDTO cases = await objCasesService.GetRLCaseInputs(casesData);

        return cases;
    }
    private async Task UpdateCase()
    {
        if (bDate != null)
        {
            cases.BirthDate = bDate;
        }
        var userInfo = await _localStorage.GetItemAsync<CurrentUserDTO>(SD.Local_UserDetails);
        userId = userInfo.Id;
        DateTime sDateTime = DateTime.Now;
        string sDateFormat = sDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        cases.StatusDate = sDateFormat;
        cases.DepartmentId = int.Parse(DepartmentIDDrop);
        cases.StatusId = int.Parse(StatusIDDrop);
        cases.SourceApp = "LO";
        cases.SourceId = 1;
        cases.ProcessType = 1;
        if (String.IsNullOrEmpty(cases.Municipality))
            cases.Municipality = " ";
        if (String.IsNullOrEmpty(cases.PhoneNr))
            cases.PhoneNr = "04- --- ---";
        if (String.IsNullOrEmpty(cases.IdentityNr))
            cases.IdentityNr = " ";
        DateTime sourceDateTime = DateTime.Now;
        string sourceDateFormat = sourceDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        cases.SourceDate = sourceDateFormat;
        await UpdateCasesMethod(caseSelected, caseinput);
    }

    private async Task UpdateCasesMethod(CasesResponseDTO caseSelected, CaseInputResponseDTO caseinput)
    {
        cases = new CUDCaseDTO()
            {
                UserId = int.Parse(userId),
                CaseId = int.Parse(CurretnID),
                CaseNr = caseSelected.CaseNr,
                AgencyId = caseSelected.AgencyId,
                EldebitorId = int.Parse(caseSelected.EldebitorId),
                AMeterId = caseinput.AMeterID,
                Subdistrict = caseinput.Subdistrict,
                CustomerName = caseSelected.CustomerName,
                IdentityNr = caseinput.IdentityNr,
                PhoneNr = caseinput.PhoneNr,
                Address = caseinput.Address,
                TariffId = caseinput.TariffId,
                Municipality = caseinput.Municipality,
                BirthDate = caseinput.BirthDate.ToString(),
                DepartmentId = caseSelected.DepartmentId,
                StatusId = caseSelected.StatusId,
                StatusDate = DateTime.Now.ToString(),
                MainResponsibleUserId = caseSelected.MainResponsibleUserId,
                SecondResponsibleUserId = caseSelected.SecondResponsibleUserId,
                SourceApp = caseSelected.SourceApp,
                SourceId = caseSelected.SourceId,
                SourceDate = caseSelected.SourceDate.ToString(),
                CreatedComment = caseSelected.CreatedComment,
                ProcessType = 2
            };

        await objCasesService.CUDRLCase(cases);
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/cases/list");
    }
}
