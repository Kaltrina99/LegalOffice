@page "/sendBack/{CaseID}"
@using LegalOfficeWeb_Models.CaseDTO
@using LegalOfficeWeb_Business.Service.IService
@using LegalOfficeWeb_Common
@using LegalOfficeWeb_Common.Helpers
@using LegalOfficeWeb_Models
@inject ILocalStorageService _localStorage
@inject ICaseService objCasesService
@inject NavigationManager NavigationManager
<h3>SendBack</h3>

<label class="form-label">@caseSelected.CaseId</label>
<label class="form-label">Reason:</label>
<select @bind="@selectedReason">
    <option value="1">Mungon ID</option>
    <option value="2">ID Gabim</option>
    <option value="3">I/e vdekur</option>
    <option value="4">Mungojne fotografite/fotografite e paqarta</option>
    <option value="5">Mungon procesverbali origjinal i terrenit  </option>
    <option value="6">Mungon procesverbali origjinal i kalibrimit</option>
    <option value="7">Mungon procesverbali origjinal i nderrimit te njehsorit  </option>
    <option value="8">Mungojne zyrtaret e MTI-se ne raportin e kalibrimit</option>
    <option value="9">Mungojne te dhenat e qiramarresit</option>
    <option value="10">Vlera e vogel</option>
    <option value="11">Tjera</option>
</select>
<label class="form-label">Doc Location:</label>
<select @bind="@selectedLocation">
    <option value="1">Legal Office</option>
    <option value="2">Customer Care</option>
</select>
<button type="submit" @onclick="(()=>UpdateCase())" form="form1" class="btn btn-primary">
    <span class="button__text">Save</span>
    <i class="button__icon fa fa-chevron-right"></i>
</button>

@code {

    private string selectedReason = "";
    private string selectedLocation = "";
    [Parameter]
    public string CaseID { get; set; }
    CasesResponseDTO caseSelected = new CasesResponseDTO();
    CaseInputResponseDTO caseinput = new CaseInputResponseDTO();
    protected override async Task OnInitializedAsync()
    {
        var userInfo = await _localStorage.GetItemAsync<CurrentUserDTO>(SD.Local_UserDetails);
        int userId = int.Parse(userInfo.Id);
        var c = int.Parse(CaseID);
        CaseDataDTO caseData = new CaseDataDTO(userId, c, "DPR");
        caseSelected = await Task.Run(() => GetCaseId(caseData));
        caseinput=await objCasesService.GetRLCaseInputs(caseData);
       

    }
    public async Task<CasesResponseDTO> GetCaseId(CaseDataDTO casesData)
    {

        CasesResponseDTO cases = await objCasesService.GetRLCase(casesData);

        return cases;
    }
    private async Task UpdateCase()
    {
        await UpdateCasesMethod(caseSelected, caseinput);
    }

    private async Task UpdateCasesMethod(CasesResponseDTO caseSelected, CaseInputResponseDTO caseinput)
    {
        CUDCaseDTO newCase = new CUDCaseDTO()
            {
                UserId = caseSelected.
                CaseId = caseSelected.CaseId,
                CaseNr = caseSelected.CaseNr,
                AgencyId = caseSelected.AgencyId,
                EldebitorId = int.Parse(caseSelected.EldebitorId),
                AMeterId = caseinput.AMeterID,
                Subdistrict = caseinput.Subdistrict,
                CustomerName = caseSelected.CustomerName,
                IdentityNr = caseinput.IdentityNr,
                PhoneNr = caseinput.PhoneNr,
                Address = caseinput.Address,
                TariffId = caseinput.TariffId,
                Municipality = caseinput.Municipality,
                BirthDate =caseinput.BirthDate.ToString(),
                DepartmentId = caseSelected.DepartmentId,
                StatusId = 5,
                StatusDate = DateTime.Now.ToString(),
                MainResponsibleUserId = caseSelected.MainResponsibleUserId,
                SecondResponsibleUserId = caseSelected.SecondResponsibleUserId,
                SourceApp = caseSelected.SourceApp,
                SourceId = caseSelected.SourceId,
                SourceDate = caseSelected.SourceDate.ToString(),
                CreatedComment = caseSelected.CreatedComment,
                ProcessType = 2
            };

        await objCasesService.CUDRLCase(newCase);
    }

    
}
