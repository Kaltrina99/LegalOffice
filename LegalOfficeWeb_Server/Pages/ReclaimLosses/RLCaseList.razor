@page "/reclaimLosses/index"
@using LegalOfficeWeb_Business.Service.IService
@using LegalOfficeWeb_Common
@using LegalOfficeWeb_Common.Helpers
@using LegalOfficeWeb_Models
@inject ILocalStorageService _localStorage
<h3>RLCaseList</h3>
<a class="btn btn-primary" href="/reclaimlosses/RLCreateCase">Create</a>
   @if (IsLoading)
{
    <div class="loader"></div>
}
else
{
    <table class="table table-sm table-striped table-bordered">
        @foreach (var item in CaseList)
        {
            <tr>
                <td>@item.CaseId</td>
                <td>@item.CaseNr</td>
                <td>@item.CreatedDate</td>
                <td>@item.CreatedUserName</td>
                <td>@item.MainResponsibleUser</td>
                <td>@item.AgencyId</td>
                <td>@item.DepartmentName</td>
                <td>@item.SourceApp</td>
                <td>@item.StatusName</td>
                <td><a class="btn btn-secondary" href="/reclaimlosses/RLCreateCase">Edit</a><a class="btn btn-danger">Delete</a></td>
            </tr>
        }
    </table>

    <!-- pager -->

    <nav class="table-responsive">
        <ul class="pagination justify-content-center d-flex flex-wrap">
        </ul>
    </nav>
}

@code {
    public bool IsLoading { get; set; } = true;
    private IEnumerable<ReclaimLossesGetAllCasesResponseDTO> CaseList { get; set; }
    public string Errors { get; set; }
    [Inject]
    public IReclaimLossesService _reclaimLosses { get; set; }
    private ReclaimLossesGetAllCasesDTO page = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        if (firstRender)
        {

            await LoadInput();

        }
    }
    private async Task LoadInput()
    {
        var userInfo = await _localStorage.GetItemAsync<CurrentUserDTO>(SD.Local_UserDetails);
        IsLoading = true;
        StateHasChanged();
        page.UserId = int.Parse(userInfo.Id);
        page.District = "DFE";
        page.PageIndex = 1;
        page.PageSize = 5;
        CaseList = await _reclaimLosses.GetAllRLCases(page);
        IsLoading = false;
        StateHasChanged();
    }

}
